#+TITLE: Emacs configuration file
#+AUTHOR: gfatnon
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+PROPERTY: header-args :tangle yes :comments org

*** .emacs

    this lines should be add to =~/.emacs=

    #+BEGIN_SRC emacs-lisp :tangle no
      (require 'org)
      (package-initialize)
      (setq package-enable-at-startup nil)
      (org-babel-load-file "~/.emacs.d/gfanton.org")
    #+END_SRC


* INTIALISATION
** Encodage
   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
     (set-language-environment "UTF-8")
   #+END_SRC

** Emacs Initialization
*** add package sources

    add repo

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
      (unless (assoc-default "melpa" package-archives)
        (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    #+END_SRC

    refresh on first init

    #+BEGIN_SRC emacs-lisp
      (unless (file-exists-p "~/.emacs.d/elpa")
        (package-refresh-contents) nil)
    #+END_SRC

*** init packages

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/elisp")
      (unless (package-installed-p 'use-package)
        (package-install 'use-package))
      (setq use-package-verbose t)
      (require 'use-package)
      (use-package dash
        :ensure t)
      (use-package auto-compile
        :ensure t
        :config (auto-compile-on-load-mode))
      (setq load-prefer-newer t)
    #+END_SRC

** Os Configuration

   Easy system check macro

   #+BEGIN_SRC emacs-lisp
     (defmacro with-system (type &rest body)
       "Evaluate body if `system-type' equals type."
       `(when (eq system-type ,type)
          ,@body))
   #+END_SRC

*** path
*** copy and past
**** MAC OSX

     #+BEGIN_SRC emacs-lisp
       (defun copy-from-osx ()
         "Copy from osx."
         (shell-command-to-string "pbpaste"))

       (defun paste-to-osx (text &optional push)
         "Past to osx."
         (let ((process-connection-type nil))
           (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
             (process-send-string proc text)
             (process-send-eof proc))))

       (with-system 'darwin
                    (setq interprogram-cut-function 'paste-to-osx)
                    (setq interprogram-paste-function 'copy-from-osx))
     #+END_SRC

**** linux
     #+BEGIN_SRC emacs-lisp
       (with-system 'gnu/linux
       (setq x-select-enable-clipboard t)
       (setq interprogram-paste-function 'x-cut-buffer-or-selection-value))
     #+END_SRC

** Load Files
*** private
    #+BEGIN_SRC emacs-lisp
(load "~/.emacs.private" t)
    #+END_SRC

*** load custom el files
    #+BEGIN_SRC emacs-lisp
      ;; (add-to-list 'load-path "~/elisp")
    #+END_SRC

** Windows

   Im not on emacs to use the mouse
   :disable useless menu bar

   #+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))
(menu-bar-mode -1)
   #+END_SRC


* GLOBAL CONFIGURATION
** Functions

   execve

   #+BEGIN_SRC emacs-lisp
(defun execvp (&rest args)
  "Simulate C's execvp() function.
Quote each argument seperately, join with spaces and call shell-command-to-string to run in a shell."
  (let ((cmd (mapconcat 'shell-quote-argument args " ")))
    (shell-command-to-string cmd)))
   #+END_SRC

** Undo - Redo
*** undo-tree

    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :defer t
        :ensure t
        :diminish undo-tree-mode
        :config
        (progn
          (global-undo-tree-mode)
          (setq undo-tree-visualizer-timestamps t)
          (setq undo-tree-visualizer-diff t)))
    #+END_SRC

*** winner-mode
    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :ensure t
        :defer t
        :config (winner-mode 1))
    #+END_SRC

** Ido

   install ido

   #+BEGIN_SRC emacs-lisp
     (use-package ido
       :config
       (progn
         (ido-mode 1)
         (ido-everywhere 1)
         (setq ido-default-buffer-method 'selected-window)))

   #+END_SRC

   ido ubiquitous

   #+BEGIN_SRC emacs-lisp
     (use-package ido-ubiquitous
       :ensure t
       :init
       (setq org-completion-use-ido t)
       (setq magit-completing-read-function 'magit-ido-completing-read)
       :config
       (ido-ubiquitous-mode 1)
       (global-set-key (kbd "C-x C-a") 'imenus))
   #+END_SRC

** Helm
*** helm

    Incremental and narrowing framework

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :config
        (helm-mode)
        (global-set-key (kbd "C-x a") 'helm-imenu))
    #+END_SRC

** History

   save history

   #+BEGIN_SRC emacs-lisp
     (setq savehist-file "~/.emacs.d/savehist")
     (savehist-mode 1)
     (setq history-length t)
     (setq history-delete-duplicates t)
     (setq savehist-save-minibuffer-history 1)
     (setq savehist-additional-variables
           '(kill-ring
             search-ring
             regexp-search-ring))
   #+END_SRC

** Backup

   store backup in .emacs.d instead of the current directory

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

     (setq delete-old-versions -1)
     (setq version-control t)
     (setq vc-make-backup-files t)
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+END_SRC

** Bookmark

   ensure bookmark is installed

   #+BEGIN_SRC emacs-lisp
     (use-package bookmark
       :ensure t)
   #+END_SRC

   add Bookmark+

   #+BEGIN_SRC emacs-lisp
     (use-package bookmark+
       :ensure t)
   #+END_SRC

** Moccure

   moccure color

   #+BEGIN_SRC emacs-lisp
     (use-package color-moccur
       :ensure t
       :commands (isearch-moccur isearch-all)
       :bind ("M-s O" . moccur)
       :init
       (bind-key "M-o" 'isearch-moccur isearch-mode-map)
       (bind-key "M-O" 'isearch-moccur-all isearch-mode-map)
       :config
       (use-package moccur-edit))
   #+END_SRC

** Whitespace

   No whitespace at the end of the line

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

   Deletes all blank lines at the end of the file

   #+BEGIN_SRC emacs-lisp
     (defun del-end-whitespace ()
       "Deletes all blank lines at the end of the file, even the last one"
       (interactive)
       (save-excursion
         (save-restriction
           (widen)
           (goto-char (point-max))
           (delete-blank-lines)
           (let ((trailnewlines (abs (skip-chars-backward "\n\t"))))
           (if (> trailnewlines 1)
               (progn
                     (delete-char trailnewlines)))))))
   #+END_SRC

** Auto-Complete

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'company-mode))
   #+END_SRC

** Snippets

   load yas

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (setq yas-snippet-dirs "~/.emacs.d/snippets") ;; not really need - default yas folder
       (yas-global-mode 1))
   #+END_SRC

** Regexp
*** visual regexp

	visual regexp replace

	#+BEGIN_SRC emacs-lisp
      (use-package visual-regexp
        :ensure t
        :config
        (define-key global-map (kbd "C-c r") 'vr/replace)
        (define-key global-map (kbd "C-c q") 'vr/query-replace)
        (define-key global-map (kbd "C-c m") 'vr/mc-mark))
	#+END_SRC

*** pcre

   	I prefere to use PCRE instead of emacs regex engine

   	#+BEGIN_SRC emacs-lisp
      (use-package pcre2el
        :ensure t
        :config
        (pcre-mode))
   	#+END_SRC

	Combine it with Visual Regexp

	#+BEGIN_SRC emacs-lisp
      (use-package visual-regexp-steroids
        :ensure t
        :config
        (custom-set-variables
         '(vr/engine (quote pcre2el))))
	#+END_SRC

** TODO Key Strokes
** Indent

   set global indent

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
     (setq-default indent-tabs-mode t)
     (setq-default c-basic-offset 4)
     (setq-default c-default-style "linux")
     (c-set-offset 'substatement-open 0)   ;;; No indent for open bracket
     (setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                                     64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))
   #+END_SRC

** Keychords
** Flycheck

   flycheck global configuration

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t)
   #+END_SRC


** TODO FTP

   Use ftp in passive

   #+BEGIN_SRC emacs-lisp
     (setq ange-ftp-ftp-program-name "pftp")
   #+END_SRC



* VISUAL
** Color Theme

    Monokai Color Theme

    #+BEGIN_SRC emacs-lisp
    (use-package monokai-theme :ensure t)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
(use-package color-theme
	:ensure t
	:config (load-theme 'monokai t))
    #+END_SRC

** Font

   Use the Inconsolata font if itâ€™s installed on the system.

   #+BEGIN_SRC emacs-lisp
	 (when (member "Inconsolata" (font-family-list))
	   (set-face-attribute 'default nil :font "Inconsolata-14"))
   #+END_SRC

   set face attribute height


   #+BEGIN_SRC emacs-lisp
	 (set-face-attribute 'default nil :height 110)
   #+END_SRC

** Tabbar

   tabbar mode (monokai style)

   #+BEGIN_SRC emacs-lisp
	 (use-package tabbar
	   :ensure t
	   :config
	   ;; set monoaki style tabbar
	   (set-face-attribute
		'tabbar-default nil
		:background "gray20"
		:foreground "gray20"
		:box '(:line-width 1 :color "gray20" :style nil))
	   (set-face-attribute
		'tabbar-unselected nil
		:background "gray30"
		:foreground "white"
		:box '(:line-width 1 :color "gray30" :style nil))
	   (set-face-attribute
		'tabbar-selected nil
		:background "gray75"
		:foreground "#A41F99"
		:box '(:line-width 1 :color "gray75" :style nil))
	   (set-face-attribute
		'tabbar-highlight nil
		:background "white"
		:foreground "black"
		:underline nil
		:box '(:line-width 1 :color "white" :style nil))
	   (set-face-attribute
		'tabbar-button nil
		:box '(:line-width 1 :color "gray20" :style nil))
	   (set-face-attribute
		'tabbar-separator nil
		:background "grey20"
		:height 0.1)

	   ;; Change padding of the tabs
	   ;; we also need to set separator to avoid overlapping tabs by highlighted tabs
	   (custom-set-variables
		'(tabbar-separator (quote (1.0))))

	   ;; adding spaces
	   (defun tabbar-buffer-tab-label (tab)
		 "Return a label for TAB.
	 That is, a string used to represent it on the tab bar."
		 (let ((label  (if tabbar--buffer-show-groups
						   (format " [%s] " (tabbar-tab-tabset tab))
						 (format " %s " (tabbar-tab-value tab)))))
		   ;; Unless the tab bar auto scrolls to keep the selected tab
		   ;; visible, shorten the tab label to keep as many tabs as possible
		   ;; in the visible area of the tab bar.
		   (if tabbar-auto-scroll-flag
			   label
			 (tabbar-shorten
			  label (max 1 (/ (window-width)
							  (length (tabbar-view
									   (tabbar-current-tabset)))))))))

	   (tabbar-mode t))
   #+END_SRC

   Switch between major mode with arrow

   #+BEGIN_SRC emacs-lisp
	 (global-set-key (kbd "<M-left>") 'tabbar-backward-tab)
	 (global-set-key (kbd "<M-right>") 'tabbar-forward-tab)
   #+END_SRC

** Nyancat Progress

    nyan cat progress animation

    #+BEGIN_SRC emacs-lisp
(use-package nyan-mode :disabled t
:ensure t
:config
(nyan-mode t)
(nyan-start-animation))
    #+END_SRC
** Powerline
   #+BEGIN_SRC emacs-lisp
	 (use-package powerline
				  :ensure t
				  :config
				  (powerline-default-theme))
   #+END_SRC

** Hightlights
*** Volatile

     volatile-highlights

     #+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
			 :ensure t
			 :config
			 (volatile-highlights-mode t))
     #+END_SRC

** Org-Babel

   color source block


* CODING
** Php

   php mode configuration

   #+BEGIN_SRC emacs-lisp
     (use-package php-mode
       :mode "\\.php\\'"
       :interpreter "php"
       :ensure t)
   #+END_SRC

   add flymake handler

   #+BEGIN_SRC emacs-lisp
     (use-package flymake-phpcs
       :ensure t)

     (use-package flymake-php
       :ensure t)
   #+END_SRC



* ORG
** Souce Block
*** fontifaction

    =not working=

    #+BEGIN_SRC emacs-lisp
;;      (setq org-src-fontify-natively t)
    #+END_SRC


* SPECIAL BINDING
** Navigation

   Jump between parenthesis

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x <down>") 'forward-sexp)
     (global-set-key (kbd "C-x <up>") 'backward-sexp)
   #+END_SRC

** Override
** New Line

   always indent on new line

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "RET") 'newline-and-indent)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun sanityinc/kill-back-to-indentation ()
       "Kill from point back to the first non-whitespace character on the line."
       (interactive)
       (let ((prev-pos (point)))
         (back-to-indentation)
         (kill-region (point) prev-pos)))
     (bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
   #+END_SRC
