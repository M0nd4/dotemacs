#+TITLE: Emacs configuration file
#+AUTHOR: gfatnon
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LaTeX_HEADER: \newminted{common-lisp}{fontsize=\footnotesize}
#+STARTUP: indent
#+PROPERTY: header-args :tangle yes :comments org

* INTIALISATION
** Dvorak Mode

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-z") ctl-x-map)
   #+END_SRC

** Encodage
   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
     (set-language-environment "UTF-8")
   #+END_SRC

** Emacs Initialization
*** add package sources

    add repo

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
      (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
      (unless (assoc-default "melpa" package-archives)
        (progn
          (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)))
    #+END_SRC

    refresh on first init

    #+BEGIN_SRC emacs-lisp
      (package-refresh-contents)
    #+END_SRC

*** init packages

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/elisp")
      (unless (package-installed-p 'use-package)
        (package-install 'use-package))
      (setq use-package-verbose t)
      (require 'use-package)
      (use-package dash
        :ensure t)
      (use-package auto-compile
        :ensure t
        :config (auto-compile-on-load-mode))
      (setq load-prefer-newer t)
    #+END_SRC

** Os Configuration

   Easy system check macro

   #+BEGIN_SRC emacs-lisp
     (defmacro with-system (type &rest body)
       "Evaluate body if `system-type' equals type."
       `(when (eq system-type ,type)
          ,@body))
   #+END_SRC

** copy and past
*** MAC OSX

     #+BEGIN_SRC emacs-lisp
       (defun copy-from-osx ()
         "Copy from osx."
         (shell-command-to-string "pbpaste"))

       (defun paste-to-osx (text &optional push)
         "Past to osx."
         (let ((process-connection-type nil))
           (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
             (process-send-string proc text)
             (process-send-eof proc))))

       (with-system 'darwin
                    (setq interprogram-cut-function 'paste-to-osx)
                    (setq interprogram-paste-function 'copy-from-osx))
     #+END_SRC

*** linux

Clipboard

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)
#+END_SRC

** Load Files
*** private
    #+BEGIN_SRC emacs-lisp
(load "~/.emacs.private" t)
    #+END_SRC

*** load custom el files
    #+BEGIN_SRC emacs-lisp
      ;; (add-to-list 'load-path "~/elisp")
    #+END_SRC

** Windows

Im not on emacs to use the mouse
:disable useless menu bar

   #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)
       (when (fboundp 'tool-bar-mode)
         (tool-bar-mode -1))
       (when (fboundp 'scroll-bar-mode)
         (scroll-bar-mode -1))
   #+END_SRC

Use Dialog Box

#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil)
#+END_SRC

** Quelpa

Emacs Lisp packages built directly from source

#+BEGIN_SRC emacs-lisp
  (use-package quelpa
    :ensure t)
#+END_SRC

quelpa handler for use-package

#+BEGIN_SRC emacs-lisp
  (use-package quelpa-use-package
    :ensure t)
#+END_SRC


* GLOBAL CONFIGURATION
** Achivement

add achivement manager

#+BEGIN_SRC emacs-lisp
  (use-package achievements
    :ensure t
    :init
    (achievements-mode))
#+END_SRC

** AutoPair

   electric mode


   #+BEGIN_SRC emacs-lisp
     (use-package autopair :disabled t
       :ensure t
       :config
       (autopair-global-mode))
   #+END_SRC

** Comment

   Multine comment

   #+BEGIN_SRC emacs-lisp
     (defun my-comment-multiline ()
       (set (make-local-variable 'comment-start) "/*")
       (set (make-local-variable 'comment-padding) " ")
       (set (make-local-variable 'comment-end) "*/")
       (set (make-local-variable 'comment-style) 'indent)
       (setq comment-use-syntax t))
   #+END_SRC


   Handling of comment boxes in various styles.

   #+BEGIN_SRC emacs-lisp
     (use-package rebox2
       :ensure t
       :config
       (setq rebox-style-loop '(24 16))
       (global-set-key (kbd "C-M-;") 'rebox-dwim))
   #+END_SRC

   dwin2

   #+BEGIN_SRC emacs-lisp
     (use-package comment-dwim-2
       :ensure t
       :init
       (global-set-key (kbd "M-;") 'comment-dwim-2))
   #+END_SRC

** Tags
*** Exuberant Ctags

Exuberant Ctags utilities for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package ctags
    :ensure t
    :init
    (setq tags-revert-without-query t)
    :config
    (global-set-key (kbd "<f7>") 'ctags-create-or-update-tags-table))
#+END_SRC

*** gtags

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t)
#+END_SRC

** Buffer

buffer move

#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :config
    (global-set-key (kbd "<C-S-up>")     'buf-move-up)
    (global-set-key (kbd "<C-S-down>")   'buf-move-down)
    (global-set-key (kbd "<C-S-left>")   'buf-move-left)
    (global-set-key (kbd "<C-S-right>")  'buf-move-right))
#+END_SRC

** Functions

   execve

   #+BEGIN_SRC emacs-lisp
     (defun execvp (&rest args)
       "Simulate C's execvp() function.
     Quote each argument seperately, join with spaces and call shell-command-to-string to run in a shell."
       (let ((cmd (mapconcat 'shell-quote-argument args " ")))
         (shell-command-to-string cmd)))
   #+END_SRC

   uniquify line

   #+BEGIN_SRC emacs-lisp
      (defun uniquify-all-lines-region (start end)
         "Find duplicate lines in region START to END keeping first occurrence."
         (interactive "*r")
         (save-excursion
           (let ((end (copy-marker end)))
             (while
                 (progn
                   (goto-char start)
                   (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
               (replace-match "\\1\n\\2")))))

       (defun uniquify-all-lines-buffer ()
         "Delete duplicate lines in buffer and keep first occurrence."
         (interactive "*")
         (uniquify-all-lines-region (point-min) (point-max)))
   #+END_SRC

   Toggle Window Split

   #+BEGIN_SRC emacs-lisp
     (defun toggle-window-split ()
       (interactive)
       (if (= (count-windows) 2)
           (let* ((this-win-buffer (window-buffer))
                  (next-win-buffer (window-buffer (next-window)))
                  (this-win-edges (window-edges (selected-window)))
                  (next-win-edges (window-edges (next-window)))
                  (this-win-2nd (not (and (<= (car this-win-edges)
                                              (car next-win-edges))
                                          (<= (cadr this-win-edges)
                                              (cadr next-win-edges)))))
                  (splitter
                   (if (= (car this-win-edges)
                          (car (window-edges (next-window))))
                       'split-window-horizontally
                     'split-window-vertically)))
             (delete-other-windows)
             (let ((first-win (selected-window)))
               (funcall splitter)
               (if this-win-2nd (other-window 1))
               (set-window-buffer (selected-window) this-win-buffer)
               (set-window-buffer (next-window) next-win-buffer)
               (select-window first-win)
               (if this-win-2nd (other-window 1))))))
   #+END_SRC

** Alias

   yes or no -> y or n

   #+BEGIN_SRC emacs-lisp
	 (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Undo - Redo
*** undo-tree

    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :ensure t
        :init
        (global-undo-tree-mode)
        (setq undo-tree-visualizer-timestamps t)
        (setq undo-tree-visualizer-diff t)
        (global-set-key (kbd "C-x u") 'undo-tree-visualize))
    #+END_SRC

*** winner-mode

    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :ensure t
        :defer t
        :config (winner-mode 1))
    #+END_SRC

** Ace
*** ace jump

   Install Ace Jump

   #+BEGIN_SRC emacs-lisp
     (use-package ace-jump-mode
       :ensure t
       :config
       (define-key global-map (kbd "C-c a") 'ace-jump-mode))
   #+END_SRC

*** ace window

   Install Ace Window

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (define-key global-map (kbd "M-n") 'ace-window))
   #+END_SRC

** Ido

install ido

#+BEGIN_SRC emacs-lisp
     (use-package ido
       :config
       (progn
         (ido-mode 1)
         (ido-everywhere 1)
         (setq ido-default-buffer-method 'selected-window)))

#+END_SRC

ido ubiquitous

#+BEGIN_SRC emacs-lisp
     (use-package ido-ubiquitous
       :ensure t
       :init
       (setq org-completion-use-ido t)
       (setq magit-completing-read-function 'magit-ido-completing-read)
       :config
       (ido-ubiquitous-mode 1))
#+END_SRC

ido vertical :disabled

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode :disabled
    :ensure t
    :init
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC

ido yes or no
from [[https://github.com/DarwinAwardWinner/ido-yes-or-no/blob/master/ido-yes-or-no.el]]

#+BEGIN_SRC emacs-lisp
  ;; (define-minor-mode ido-yes-or-no-mode
  ;;   "Use ido for `yes-or-no-p'."
  ;;   nil
  ;;   :global t
  ;;   :group 'ido)

  ;; (defun ido-yes-or-no-p (prompt)
  ;;   "Ask user a yes-or-no question using ido."
  ;;   (let* ((yes-or-no-prompt (concat prompt " "))
  ;;          (choices '("yes" "no"))
  ;;          (answer (ido-completing-read yes-or-no-prompt choices nil 'require-match)))
  ;;     (string= answer "yes")))

  ;; (defadvice yes-or-no-p (around use-ido activate)
  ;;   (if ido-yes-or-no-mode
  ;;       (setq ad-return-value (ido-yes-or-no-p prompt))
  ;;     ad-do-it))

  ;; (provide 'ido-yes-or-no)
  ;; ido-yes-or-no.el ends here
#+END_SRC
** Clipmon

Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert

#+BEGIN_SRC emacs-lisp
  (use-package clipmon
    :ensure t
    :config
    (global-set-key (kbd "<M-f2>") 'clipmon-autoinsert-toggle))
#+END_SRC

** Jabber

A Jabber client for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package jabber
  :ensure t
  :config
  (remove-hook 'jabber-alert-presence-hooks
               'sr-jabber-alert-presence-func))
#+END_SRC

** Projectile

   Manage and navigate projects in Emacs easily

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :init
       (setq projectile-tags-command "ctags-exuberant --languages=-JavaScript -Re -f \"%s\" %s")
       (setq projectile-indexing-method 'native)
       (setq projectile-enable-caching t)
       (setq projectile-switch-project-action 'projectile-dired)
       :config
       (projectile-global-mode))
   #+END_SRC

** Tramp

disable locate-dominating-file frequently over tramp causes huge slowdown.

#+BEGIN_SRC emacs-lisp
(defadvice projectile-on (around exlude-tramp activate)
    (unless  (--any? (and it (file-remote-p it))
        (list
            (buffer-file-name)
            list-buffers-directory
            default-directory))
    ad-do-it))
#+END_SRC

** Imenus

   list all methods

   #+BEGIN_SRC emacs-lisp
     (use-package imenus
       :defer t
       :ensure t
       :config
       (global-set-key (kbd "C-x C-a") 'imenus))
   #+END_SRC

** History

   save history

   #+BEGIN_SRC emacs-lisp
     (setq savehist-file "~/.emacs.d/savehist")
     (savehist-mode 1)
     (setq history-length t)
     (setq history-delete-duplicates t)
     (setq savehist-save-minibuffer-history 1)
     (setq savehist-additional-variables
           '(kill-ring
             search-ring
             regexp-search-ring))
   #+END_SRC

** Backup

   store backup in .emacs.d instead of the current directory

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

     (setq delete-old-versions -1)
     (setq version-control t)
     (setq vc-make-backup-files t)
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+END_SRC

** Bookmark

   ensure bookmark is installed

   #+BEGIN_SRC emacs-lisp
     (use-package bookmark
       :ensure t)
   #+END_SRC

   add Bookmark+

   #+BEGIN_SRC emacs-lisp
     (use-package bookmark+
       :ensure t)
   #+END_SRC

** Moccure

   moccure color

   #+BEGIN_SRC emacs-lisp
     (use-package color-moccur
       :ensure t
       :commands (isearch-moccur isearch-all)
       :bind ("M-s O" . moccur)
       :init
       (bind-key "M-o" 'isearch-moccur isearch-mode-map)
       (bind-key "M-O" 'isearch-moccur-all isearch-mode-map)
       :config
       (use-package moccur-edit))
   #+END_SRC

** Whitespace

   No whitespace at the end of the line

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

   Deletes all blank lines at the end of the file

   #+BEGIN_SRC emacs-lisp
     (defun del-end-whitespace ()
       "Deletes all blank lines at the end of the file, even the last one"
       (interactive)
       (save-excursion
         (save-restriction
           (widen)
           (goto-char (point-max))
           (delete-blank-lines)
           (let ((trailnewlines (abs (skip-chars-backward "\n\t"))))
           (if (> trailnewlines 1)
               (progn
                     (delete-char trailnewlines)))))))
   #+END_SRC

** Pos-Tip

Show tooltip at point

#+BEGIN_SRC emacs-lisp
  (use-package pos-tip
    :ensure t)
#+END_SRC

** Company

*** company mode

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'company-mode))
   #+END_SRC

*** company doc

Popup documentation for completion candidates

#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp :disabled
    :ensure t
    :init
    (company-quickhelp-mode nil))
#+END_SRC

*** company web

Company version of ac-html, complete for web,html,emmet,jade,slim modes

#+BEGIN_SRC emacs-lisp
  (use-package company-web
    :ensure t)
#+END_SRC

** Snippets

   load yas

   #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
       :ensure t
       :init
       (setq yas-snippet-dirs "~/.emacs.d/snippets") ;; not really need - default yas folder
       (yas-global-mode 1))
   #+END_SRC

** Emmet

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (eval-after-load 'web-mode
      '(define-key web-mode-map (kbd "TAB") 'emmet-expand-line))
    (add-hook 'css-mode-hook  'emmet-mode)
    (eval-after-load 'css-mode
      '(define-key css-mode-map (kbd "TAB") 'emmet-expand-line)))
#+END_SRC

** Conkeror

Set conkeror as default web browser

#+BEGIN_SRC emacs-lisp
  (setq browse-url-generic-program (executable-find "conkeror"))
  (setq browse-url-browser-function 'browse-url-generic)
#+END_SRC

** Eimp

Emacs Image Manipulation Package

#+BEGIN_SRC emacs-lisp
  (use-package eimp
    :ensure t
    :config
    (add-hook 'image-mode-hook 'eimp-mode))
#+END_SRC

** Multi-Cursor

Multiple cursors for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

** Regexp
*** visual regexp

	visual regexp replace

	#+BEGIN_SRC emacs-lisp
      (use-package visual-regexp
        :ensure t
        :config
        (define-key global-map (kbd "C-c r") 'vr/replace)
        (define-key global-map (kbd "C-c q") 'vr/query-replace)
        (define-key global-map (kbd "C-c m") 'vr/mc-mark))
	#+END_SRC

*** pcre

   	I prefere to use PCRE Instead of emacs regex engine

   	#+BEGIN_SRC emacs-lisp
      (use-package pcre2el
        :ensure t
        :config
        (pcre-mode))
   	#+END_SRC

	Combine it with Visual Regexp

	#+BEGIN_SRC emacs-lisp
      (use-package visual-regexp-steroids
        :ensure t
        :config
        (custom-set-variables
         '(vr/engine (quote pcre2el))))
	#+END_SRC

** Edbi

Database viewer
Need cpan installed

   #+BEGIN_SRC emacs-lisp
     (use-package edbi
       :ensure t)
   #+END_SRC

Handle company mode

#+BEGIN_SRC emacs-lisp
  (use-package company-edbi
    :ensure t
    :init
    (add-to-list 'company-backends 'company-edbi))
#+END_SRC

** Indent

   set global indent

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
     (setq-default indent-tabs-mode t)
     (setq c-default-style "bsd"
           c-basic-offset 4)
     (c-set-offset 'substatement-open 0)   ;;; No indent for open bracket
   #+END_SRC

** skeletor

Provides project skeletons for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package skeletor
    :ensure t)

#+END_SRC

** Cedet

Init Semantic

#+BEGIN_SRC xaemacs-lisp
      (semantic-mode 1)
#+END_SRC

** Keychords

   Keychords Install

   #+BEGIN_SRC emacs-lisp
     (use-package key-chord
       :ensure t
       :config
       (progn
         (key-chord-mode 1)
         (key-chord-define-global "KL" 'linum-mode)
         (key-chord-define-global "FG" 'git-gutter-mode)
         (key-chord-define-global "DF" 'flycheck-mode)
         (key-chord-define-global "XC" 'company-mode)
         (key-chord-define-global ",," 'company-other-backend)))
   #+END_SRC

** Flycheck

   flycheck global configuration

   #+BEGIN_SRC emacs-lisp
    (use-package flycheck
       :ensure t
       :config
       (progn
         (add-hook 'after-init-hook #'global-flycheck-mode)
         (setq flycheck-check-syntax-automatically '(mode-enabled save))
         (setq flycheck-phpcs-standard "Prestashop")))
   #+END_SRC

** FTP

Use ftp in passive

#+BEGIN_SRC emacs-lisp
  (setq ange-ftp-ftp-program-name "pftp")
#+END_SRC

disable zsh while using tramp

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/sh"))
#+END_SRC

** Linum
*** linum relative


#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (linum-mode 1))
#+END_SRC

** Magit

   Git manager for emacs

   #+BEGIN_SRC emacs-lisp
          (use-package magit
            :defer t
            :init (setq magit-last-seen-setup-instructions "1.4.0")
            :ensure t)
   #+END_SRC

   Bind git status

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

   FIle notify

   #+BEGIN_SRC emacs-lisp
     (use-package magit-filenotify
       :ensure t
       :config
       (add-hook 'magit-status-mode-hook 'magit-filenotify-mode))
   #+END_SRC

   Pull request

   #+BEGIN_SRC emacs-lisp
     (use-package magit-gh-pulls
       :ensure t
       :config (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
   #+END_SRC

** Win Move

   WinMove lets you move point from window to window using Shift and the arrow keys.

   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'windmove-default-keybindings)
       (windmove-default-keybindings))
   #+END_SRC

   Make windmove work in org-mode

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+END_SRC

** GitGutter

   Port of Sublime Text plugin GitGutter

   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :ensure t
       :config
       (custom-set-variables
        '(git-gutter:separator-sign " "))
       (set-face-foreground 'git-gutter:separator "black"))
   #+END_SRC

** Prodigy

Manage external services from within Emacs

#+BEGIN_SRC emacs-lisp
  (use-package prodigy
    :ensure t)
#+END_SRC

** Tweek
*** lorem ipsem

	For generate lorem ipsem

	#+BEGIN_SRC emacs-lisp
      (use-package lorem-ipsum
        :ensure t)
	#+END_SRC

** NeoTree

   Tree Folder

   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :config
       (global-set-key (kbd "C-c t") 'neotree-toggle))
   #+END_SRC

** Minimap

   Show a minimap in the current buffer

   #+BEGIN_SRC emacs-lisp
     (use-package minimap :disabled t
       :ensure t)
   #+END_SRC

** String Inflection

   cycling text between various styles (CamelCase, snake_case, lowerCamelCase, etc)

   #+BEGIN_SRC emacs-lisp
     (use-package string-inflection
       :ensure t)
   #+END_SRC

** Multi Term

   Managing multiple terminal buffers in Emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package multi-term :disabled
       :ensure t)
   #+END_SRC

** Dired

   Enchance dired with dired+

   #+BEGIN_SRC emacs-lisp
     (use-package dired+
       :ensure t)
   #+END_SRC

Allow to switch from current user to sudo when browsind `dired' buffers.
To activate and swit with "C-c C-s" just put in your .emacs:
*source:* [[dired toogle sudo by][https://github.com/renard/dired-toggle-sudo/blob/master/dired-toggle-sudo.el]]

   #+BEGIN_SRC emacs-lisp
     (eval-when-compile (require 'files))
     (eval-when-compile (require 'tramp))
     (eval-when-compile (require 'dired))

     (defun dired-toggle-sudo-internal (path &optional sudo-user)
       "Convert PATH to its sudoed version. root is used by default
     unless SUDO-USER is provided."
       (let* ((file-vec (or (ignore-errors (tramp-dissect-file-name
                                            path))
                            (tramp-dissect-file-name
                             (concat "/:" path) 1)))
              (method  (tramp-file-name-method file-vec))
              (user (tramp-file-name-user file-vec))
              (host  (tramp-file-name-host file-vec))
              (localname (expand-file-name
                          (tramp-file-name-localname file-vec))))
         (when (string= system-name host)
           (setq host nil))
         (cond
          ;; remote directory -> sudo
          ((and host (string= method "scp"))
           (setq method "sudo" user sudo-user))
          ;; remote directory -> normal
          ((and host (string= method "sudo"))
           (setq method "scp" user nil))
          ;; Local directory -> normal
          ((and (not host) (string= method "scp"))
           (setq method "sudo"))
          ;; Local directory -> sudo
          ((and (not host) (string= method "sudo"))
           (setq method nil user sudo-user))
          ;; Local directory -> normal
          (t
           (setq method "sudo" user sudo-user)))
         (replace-regexp-in-string
          "^/:/" "/"
          (tramp-make-tramp-file-name method user host localname))))

     (defun dired-toggle-sudo-find (fname)
       "Create a new buffer for file name FNAME."
       (let ((save-point (point)))
         (find-alternate-file fname)
         (goto-char save-point)))

     ;;;###autoload
     (defun dired-toggle-sudo (&optional sudo-user)
       "Reopen current file or dired buffer with sudo.
     If SUDO-USER is nil assume root.
     If called with `universal-argument' (C-u), ask for username.
     "
       (interactive "P")
       (let* ((fname (or buffer-file-name
                         dired-directory))
              (sudo-user (if current-prefix-arg
                             (read-string "Username: ")
                           sudo-user))
              (orig (current-buffer)))
         (when fname
           (setq fname (dired-toggle-sudo-internal fname sudo-user))
           (if (not (eq major-mode 'dired-mode))
               (dired-toggle-sudo-find fname)
             (kill-buffer orig)
             (dired fname)))))

     (provide 'dired-toggle-sudo)
   #+END_SRC

** Docker

Emacs interface to Docker

#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :config
    (docker-global-mode))
#+END_SRC

TRAMP integration for docker containers

#+BEGIN_SRC emacs-lisp
  (use-package docker-tramp
    :ensure t)
#+END_SRC

Major mode for editing Docker's Dockerfiles

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

** SVG

   SVG support

   #+BEGIN_SRC emacs-lisp
     ;; (use-package es-lib
     ;;   :ensure t
     ;;   :config
     ;;   (progn
     ;;     (setq package-user-dir
     ;;           (concat temporary-file-directory "tempelpa"))
     ;;     (with-current-buffer
     ;;         (url-retrieve-synchronously
     ;;          "https://raw.githubusercontent.com/sabof/svg-thing/master/svg-thing.el")
     ;;       (goto-char (point-min))
     ;;       (search-forward "\n\n")
     ;;       (delete-region (point-min) (point))
     ;;       (eval-buffer))
     ;;     (svg-thing)
     ;;     (setq-default
     ;;      mode-line-format nil)
     ;;     (tool-bar-mode -1)
     ;;     (menu-bar-mode -1)
     ;;     (scroll-bar-mode -1)
     ;;     (delete-other-windows)))
   #+END_SRC

** Rudel

   Collaborative editing

   #+BEGIN_SRC emacs-lisp
     (use-package rudel :disabled t
       :ensure t
       :config
       (global-rudel-minor-mode 1))
   #+END_SRC

** E2wm

   windows manager for emacs

   #+BEGIN_SRC emacs-lisp
     (use-package e2wm
       :ensure t
       :config
       (autoload 'e2wm:dp-edbi "e2wm-edbi" nil t)
       (global-set-key (kbd "C-c ; ;") 'e2wm:start-management))
   #+END_SRC

   e2wm direx

   #+BEGIN_SRC emacs-lisp
     (use-package e2wm-direx
       :ensure t
       :config
       (setq e2wm:c-code-recipe
             '(| (:left-max-size 40)
                 (- (:upper-size-ratio 0.6)
                    tree history)
                 (- (:lower-max-size 150)
                    (| (:right-max-size 40)
                       main imenu)
                    sub)))

       (setq e2wm:c-code-winfo
             '((:name main)
               (:name tree    :plugin direx)
               (:name history :plugin history-list)
               (:name imenu   :plugin imenu :default-hide nil)
               (:name sub     :buffer "*info*" :default-hide t))))
   #+END_SRC

** Spray

   Fast reading

   #+BEGIN_SRC emacs-lisp
     (use-package spray
       :ensure t)
   #+END_SRC

** Conkeror

   browse with conkeror

   #+BEGIN_SRC emacs-lisp
     ;; (custom-set-variables
     ;;  '(browse-url-browser-function (quote browse-url-conkeror)))
   #+END_SRC

** Helm
*** helm

Incremental and narrowing framework

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :config
        (global-set-key (kbd "C-x a") 'helm-imenu)
        (global-set-key (kbd "C-x b") 'helm-buffers-list)
        (global-set-key (kbd "C-x f") 'helm-find-files)
        (global-set-key (kbd "M-x") 'helm-M-x))
   #+END_SRC

*** helm-projectile

helm for projectile

	#+BEGIN_SRC emacs-lisp
      (use-package helm-projectile :disabled
        :ensure t)
	#+END_SRC

*** helm-google

	Emacs Helm Interface for quick Google searches

	#+BEGIN_SRC emacs-lisp
      (use-package helm-google
        :ensure t
        :config
        (global-set-key (kbd "C-c g") 'helm-google)
        (setq browse-url-browser-function 'eww-browse-url))
	#+END_SRC

*** helm-gtags

helm for gtags

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure t)
#+END_SRC

*** helm-emmet

#+BEGIN_SRC emacs-lisp
   (use-package helm-emmet
     :ensure t
     :config
     (eval-after-load 'web-mode
                      '(define-key web-mode-map (kbd "C-j") 'helm-emmet)))
#+END_SRC


* VISUAL
** Color Theme

	init Color Theme

    #+BEGIN_SRC emacs-lisp
      (use-package color-theme
        :ensure t)
    #+END_SRC

** Themes
*** Monokai

	#+BEGIN_SRC emacs-lisp
      (use-package monokai-theme
        :ensure t)
	#+END_SRC

*** Material

	#+BEGIN_SRC emacs-lisp
      (use-package material-theme
        :ensure t)
	#+END_SRC

*** Spacemacs

#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :init
    (load-theme 'spacemacs-dark t))
#+END_SRC

*** Solarized

#+BEGIN_SRC emacs-lisp
      (use-package solarized-theme
       :ensure t)
#+END_SRC

*** load theme

#+BEGIN_SRC emacs-lisp
(load-theme 'monokai t)
#+END_SRC

** Font

   Use the Inconsolata font if it’s installed on the system.

   #+BEGIN_SRC emacs-lisp
	 (when (member "Inconsolata" (font-family-list))
	   (set-face-attribute 'default nil :font "Inconsolata-9"))
   #+END_SRC

** Tabbar

   tabbar mode (monokai style)

   #+BEGIN_SRC emacs-lisp
     (use-package tabbar :disabled t
       :ensure t
       :config
       ;; set monoaki style tabbar
       (set-face-attribute
        'tabbar-default nil
        :background "gray20"
        :foreground "gray20"
        :box '(:line-width 1 :color "gray20" :style nil))
       (set-face-attribute
        'tabbar-unselected nil
        :background "gray30"
        :foreground "white"
        :box '(:line-width 1 :color "gray30" :style nil))
       (set-face-attribute
        'tabbar-selected nil
        :background "gray75"
        :foreground "#A41F99"
        :box '(:line-width 1 :color "gray75" :style nil))
       (set-face-attribute
        'tabbar-highlight nil
        :background "white"
        :foreground "black"
        :underline nil
        :box '(:line-width 1 :color "white" :style nil))
       (set-face-attribute
        'tabbar-button nil
        :box '(:line-width 1 :color "gray20" :style nil))
       (set-face-attribute
        'tabbar-separator nil
        :background "grey20"
        :height 0.1)

       ;; Change padding of the tabs
       ;; we also need to set separator to avoid overlapping tabs by highlighted tabs
       (custom-set-variables
        '(tabbar-separator (quote (1.0))))

       ;; adding spaces
       (defun tabbar-buffer-tab-label (tab)
         "Return a label for TAB.
     That is, a string used to represent it on the tab bar."
         (let ((label  (if tabbar--buffer-show-groups
                           (format " [%s] " (tabbar-tab-tabset tab))
                         (format " %s " (tabbar-tab-value tab)))))
           ;; Unless the tab bar auto scrolls to keep the selected tab
           ;; visible, shorten the tab label to keep as many tabs as possible
           ;; in the visible area of the tab bar.
           (if tabbar-auto-scroll-flag
               label
             (tabbar-shorten
              label (max 1 (/ (window-width)
                              (length (tabbar-view
                                       (tabbar-current-tabset)))))))))

       (tabbar-mode t))
   #+END_SRC

   Switch between major mode with arrow

   #+BEGIN_SRC emacs-lisp
	 (global-set-key (kbd "<M-left>") 'tabbar-backward-tab)
	 (global-set-key (kbd "<M-right>") 'tabbar-forward-tab)
   #+END_SRC

** Nyancat Progress

    nyan cat progress animation

    #+BEGIN_SRC emacs-lisp
(use-package nyan-mode :disabled t
:ensure t
:config
(nyan-mode t)
(nyan-start-animation))
    #+END_SRC

** Powerline

Powerline-vim port for emacs

   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :ensure t
       :defer t
       :init
       (progn
         (powerline-default-theme)))
   #+END_SRC

** Hightlights
*** Volatile

     volatile-highlights

     #+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
			 :ensure t
			 :config
			 (volatile-highlights-mode t))
     #+END_SRC

*** line

	Hightlight line

	#+BEGIN_SRC emacs-lisp
      (use-package hl-line+
        :ensure t
        :config
        (global-hl-line-mode)
        (toggle-hl-line-when-idle 1))
 	#+END_SRC

** Pretty Mode

   Prettify Symbole

   #+BEGIN_SRC emacs-lisp
     (use-package pretty-symbols
       :ensure t
       :config
       (font-lock-mode)
       (global-prettify-symbols-mode))
   #+END_SRC

** Tiny

Quickly generate linear ranges in Emacs

#+BEGIN_SRC emacs-lisp
  (use-package tiny
    :ensure t
    :config
    (global-set-key (kbd "C-;") 'tiny-expand))
#+END_SRC

** Color Identifier

   Color identifier

   #+BEGIN_SRC emacs-lisp
     (use-package color-identifiers-mode
       :ensure t
       :config
       (add-hook 'after-init-hook 'global-color-identifiers-mode))
   #+END_SRC




* GLOBAL MODE
** Impatient Mode

Serve buffers live over HTTP

#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
    :ensure t)
#+END_SRC

** Tail Mode

   Auto-mode-alist

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
   #+END_SRC

** Php Mode

php mode configuration

#+BEGIN_SRC emacs-lisp
      (use-package php-mode
        :mode "\\.php\\'"
        :interpreter "php"
        :ensure t)
#+END_SRC

Config indent

#+BEGIN_SRC emacs-lisp
  (add-hook 'php-mode-hook (lambda ()
                             (setq indent-tabs-mode t)
                             (let (my-tab-width 4)
                               (setq tab-width my-tab-width)
                               (setq c-basic-indent my-tab-width))))
#+END_SRC

Underscrore Var

#+BEGIN_SRC emacs-lisp
      (defun underscore-variable (string &optional from to)
        "underscore var"
        (interactive
         (if (use-region-p)
             (list nil (region-beginning) (region-end))
           (let ((bds (bounds-of-thing-at-point 'paragraph)) )
             (list nil (car bds) (cdr bds)))))

        (while (re-search-forward "\\(>\\|\\$\\(?:this->\\)?\\)\\([-_[:alnum:]]+?\\)\\([^(_[:alnum:]]\\)" nil t)
          (replace-match
           (concat (match-string 1)
                   (string-inflection-underscore-function (match-string 2))
                   (match-string 3)) nil nil)))

#+END_SRC

Hanlde Company Mode

#+BEGIN_SRC emacs-lisp
  (use-package php-extras
    :ensure t)
#+END_SRC

** Web Mode

  Web Mode

  #+BEGIN_SRC emacs-lisp
	(use-package web-mode
	  :mode "\\.html?\\'"
	  :defer t
	  :ensure t
	  :config
	  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
	  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

	  (setq web-mode-engines-alist '(("php" . "\\.phtml\\'") ("blade" . "\\.blade\\.")) )
	  (setq web-mode-extra-auto-pairs '(("erb" . (("open" "close"))) ("php" . (("open" "close") ("open" "close"))) ))
	  (setq web-mode-enable-auto-pairing t)
	  (setq web-mode-enable-part-face t)
	  (setq web-mode-enable-css-colorization t)
	  (setq web-mode-enable-auto-pairing t))
   #+END_SRC

Emmet-mode

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t)
#+END_SRC

Emmet-helm

#+BEGIN_SRC emacs-lisp
  (use-package helm-emmet
    :ensure t)
#+END_SRC

** Js2 Mode

   Js2 mode

   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :ensure t
       :config
       (progn
         (autoload 'js2-mode "js2" nil t)
         (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
         (js2-imenu-extras-mode)))
   #+END_SRC

** C/C++ mode
*** Campany c mode

Company backend support

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :ensure t)
#+END_SRC

*** Disaster

Disassemble C/C++ code under cursor in Emacs

#+BEGIN_SRC emacs-lisp
  (use-package disaster
    :ensure t)
#+END_SRC

** Python mode
*** Anaconda mode

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'eldoc-mode))
#+END_SRC

*** Company

#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
    :config
    (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

** Csv mode

   CSV mode

   #+BEGIN_SRC emacs-lisp
     (use-package csv-mode
       :ensure t)
   #+END_SRC



* ORG
** Org-Jira

   Add jira support

   #+BEGIN_SRC emacs-lisp
     (use-package org-jira
       :ensure t)
   #+END_SRC

** Shift Select

   disable shift selection

   #+BEGIN_SRC emacs-lisp
     (setq shift-select-mode nil)
   #+END_SRC

** Souce Block
*** fontifaction

=not working=

#+BEGIN_SRC emacs-lisp
  ;; (setq org-src-fontify-natively t)
#+END_SRC

** Password Manager

Minimal password manager for Emacs Org Mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-password-manager
    :ensure t)

#+END_SRC

Password generator for humans. Good, Bad, Phonetic passwords included.

#+BEGIN_SRC emacs-lisp
  (use-package password-generator
    :ensure t)
#+END_SRC

** Org Anotate


#+BEGIN_SRC emacs-lisp
  (use-package annotate
    :ensure t)

#+END_SRC

** Presentation
*** ox-impress-js

#+BEGIN_SRC emacs-lisp
  (use-package ox-impress-js
    :ensure t)
#+END_SRC

*** ox-reveal

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "file:///reveal.js"))
#+END_SRC

*** ox-rst

#+BEGIN_SRC emacs-lisp
  (use-package ox-rst
    :ensure t)
#+END_SRC



* SPECIAL BINDING
** Execute

execute region

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-e") 'eval-region)
#+END_SRC

** Navigation

   Jump between parenthesis

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x <down>") 'forward-sexp)
     (global-set-key (kbd "C-x <up>") 'backward-sexp)
   #+END_SRC

   Forward paragraph


   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-M-n") 'forward-paragraph)
     (global-set-key (kbd "C-M-p") 'backward-paragraph)
   #+END_SRC

** New Line

   always indent on new line

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "RET") 'newline-and-indent)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun sanityinc/kill-back-to-indentation ()
       "Kill from point back to the first non-whitespace character on the line."
       (interactive)
       (let ((prev-pos (point)))
         (back-to-indentation)
         (kill-region (point) prev-pos)))
     (bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
   #+END_SRC

** Go To Line

Go to line

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-g") 'goto-line)
#+END_SRC

** toogle vertical split

toogle vertical split macro

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x |") 'toggle-window-split)
#+END_SRC

** Make Frame

move buffer into a new frame

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 5 4")
                  (lambda () (interactive)
                    (let ((win (get-buffer-window (buffer-name))))
                      (progn
                        (switch-to-buffer-other-frame (buffer-name))
                        (delete-window win)))))
#+END_SRC


* USELESS MODE
** Zone Mode

#+BEGIN_SRC emacs-lisp
  (require 'zone)
  (zone-when-idle 120)
#+END_SRC


* PRIVATE

load private file

#+BEGIN_SRC emacs-lisp
(let ((private "~/lisp/private.el"))
  (if (file-exists-p private)
	  (load-file private)))
#+END_SRC
