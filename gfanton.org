#+TITLE: Emacs configuration file
#+AUTHOR: gfatnon
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+PROPERTY: header-args :tangle yes :comments org

*** .emacs
this lines should be add to =~/.emacs=

#+BEGIN_SRC  emacs-lisp  :tangle no
;; This sets up the load path so that we can override it
(package-initialize nil)
;; override what you want
;; (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
;; Load the rest of the packages
(package-initialize nil)
(setq package-enable-at-startup nil)
(org-babel-load-file "~/.emacs.d/gfanton.org")
#+END_SRC


* Intialisation
** Encodage
   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
     (set-language-environment "UTF-8")
   #+END_SRC

** Emacs initialization
*** Add package sources
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
#+END_SRC

*** init packages
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/elisp")
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(require 'use-package)
(use-package dash
  :ensure t)
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

** OS Configuration

Easy system check macro

#+BEGIN_SRC emacs-lisp
(defmacro with-system (type &rest body)
  "Evaluate body if `system-type' equals type."
  `(when (eq system-type ,type)
     ,@body))
#+END_SRC

*** path
****  MAC OSX
ensure to get path from shell

#+BEGIN_SRC emacs-lisp
 (with-system 'mac ns
  	(exec-path-from-shell-initialize)
	(setq mac-option-modifier nil
        mac-command-modifier 'meta))
#+END_SRC

*** Copy and Past
**** MAC OSX
#+BEGIN_SRC emacs-lisp
(with-system 'mac ns
(defun copy-from-osx ()
"Copy from osx."
  (shell-command-to-string "pbpaste"))

(defun paste-to-osx (text &optional push)
"Past to osx."
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))

(setq interprogram-cut-function 'paste-to-osx)
(setq interprogram-paste-function 'copy-from-osx))
#+END_SRC

**** Linux
#+BEGIN_SRC emacs-lisp
(with-system 'gnu/linux
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value))
#+END_SRC

** load files
*** private
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.private" t)
#+END_SRC

*** load custom el files
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'load-path "~/elisp")
#+END_SRC

** Windows

Im not on emacs to use the mouse
:disable useless menu bar

#+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))
(menu-bar-mode -1)
#+END_SRC

* IN-PROGRESS Global Configuration
** Visual
*** Color Theme

Monokai Color Theme

#+BEGIN_SRC emacs-lisp
(use-package color-theme
	:ensure t
	:init (use-package monokai-theme :ensure t)
	:config (load-theme 'monokai t))
#+END_SRC

*** font

Use the Inconsolata font if itâ€™s installed on the system.

#+BEGIN_SRC emacs-lisp
(when (member "Inconsolata" (font-family-list))
  (set-face-attribute 'default nil :font "Inconsolata-14"))
#+END_SRC

*** tabbar

tabbar mode

#+BEGIN_SRC emacs-lisp
(use-package tabbar
			 :ensure t
			 :config
			 (set-face-attribute
			  'tabbar-default nil
			  :background "gray20"
			  :foreground "gray20"
			  :box '(:line-width 1 :color "gray20" :style nil))
			 (set-face-attribute
			  'tabbar-unselected nil
			  :background "gray30"
			  :foreground "white"
			  :box '(:line-width 5 :color "gray30" :style nil))
			 (set-face-attribute
			  'tabbar-selected nil
			  :background "gray75"
			  :foreground "#A41F99"
			  :box '(:line-width 5 :color "gray75" :style nil))
			 (set-face-attribute
			  'tabbar-highlight nil
			  :background "white"
			  :foreground "black"
			  :underline nil
			  :box '(:line-width 5 :color "white" :style nil))
			 (set-face-attribute
			  'tabbar-button nil
			  :box '(:line-width 1 :color "gray20" :style nil))
			 (set-face-attribute
			  'tabbar-separator nil
			  :background "grey20"
			  :height 0.1)


			 ;; Change padding of the tabs
			 ;; we also need to set separator to avoid overlapping tabs by highlighted tabs
			 (custom-set-variables
			  '(tabbar-separator (quote (1.0))))
			 ;; adding spaces
			 (defun tabbar-buffer-tab-label (tab)
			   "Return a label for TAB.
That is, a string used to represent it on the tab bar."
			   (let ((label  (if tabbar--buffer-show-groups
								 (format " [%s] " (tabbar-tab-tabset tab))
							   (format " %s " (tabbar-tab-value tab)))))
				 ;; Unless the tab bar auto scrolls to keep the selected tab
				 ;; visible, shorten the tab label to keep as many tabs as possible
				 ;; in the visible area of the tab bar.
				 (if tabbar-auto-scroll-flag
					 label
				   (tabbar-shorten
					label (max 1 (/ (window-width)
									(length (tabbar-view
											 (tabbar-current-tabset)))))))))
			 (tabbar-mode t))
#+END_SRC

*** NyanCat Progress

nyan cat progress animation

#+BEGIN_SRC emacs-lisp
(use-package nyan-mode :disabled t
:ensure t
:config
(nyan-mode t)
(nyan-start-animation))
#+END_SRC
*** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
			 :ensure t
			 :config
			 (powerline-default-theme))
#+END_SRC

*** Hightlights
**** volatile

volatile-highlights

#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
			 :ensure t
			 :config
			 (volatile-highlights-mode t))
#+END_SRC


** functions

execve

#+BEGIN_SRC emacs-lisp
(defun execvp (&rest args)
  "Simulate C's execvp() function.
Quote each argument seperately, join with spaces and call shell-command-to-string to run in a shell."
  (let ((cmd (mapconcat 'shell-quote-argument args " ")))
    (shell-command-to-string cmd)))
#+END_SRC

** Undo - Redo
*** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer t
  :ensure t
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
#+END_SRC

*** winner-mode
#+BEGIN_SRC emacs-lisp
(use-package winner
  :ensure t
  :defer t
  :config (winner-mode 1))
#+END_SRC

** Ido

install ido

#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (progn
  (ido-mode 1)
  (ido-everywhere 1)
  (setq ido-default-buffer-method 'selected-window)
  (add-hook 'ido-make-file-list-hook 'ido-sort-mtime)
  (add-hook 'ido-make-dir-list-hook 'ido-sort-mtime)
  (defun ido-sort-mtime ()
    (setq ido-temp-list
          (sort ido-temp-list
                (lambda (a b)
                  (let ((ta (nth 5 (file-attributes (concat ido-current-directory a))))
                        (tb (nth 5 (file-attributes (concat ido-current-directory b)))))
                    (if (= (nth 0 ta) (nth 0 tb))
                        (> (nth 1 ta) (nth 1 tb))
                      (> (nth 0 ta) (nth 0 tb)))))))
    (ido-to-end  ;; move . files to end (again)
     (delq nil (mapcar
                (lambda (x) (if (string-equal (substring x 0 1) ".") x))
                ido-temp-list))))))
#+END_SRC

ido ubiquitous

#+BEGIN_SRC emacs-lisp
(use-package ido-ubiquitous
	:ensure t
	:init
	(setq org-completion-use-ido t)
	(setq magit-completing-read-function 'magit-ido-completing-read)
	:config
	(ido-ubiquitous-mode 1))
#+END_SRC

** History
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

** Whitespace

No whitespace at the end of the line

#+BEGIN_SRC emacs-lisp
(defun del-end-whitespace ()
  "Deletes all blank lines at the end of the file, even the last one"
  (interactive)
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-max))
      (delete-blank-lines)
      (let ((trailnewlines (abs (skip-chars-backward "\n\t"))))
      (if (> trailnewlines 1)
          (progn
	        (delete-char trailnewlines)))))))
#+END_SRC

** auto-complete

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'company-mode))
#+END_SRC

** Snippets

load yas

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
			 :ensure t
			 :init
			 (setq yas-snippet-dirs "~/.emacs.d/snippets") ;; not really need - default yas folder
			 (yas-global-mode 1))
#+END_SRC

** PCRE

I prefere to use PCRE instead of emacs regex engine

#+BEGIN_SRC emcas_lisp
(use-package pcre2lisp
			 :ensure t
			 :config
			 (pcre-mode))
#+END_SRC


* TODO Mode

* IN-PROGRESS Key
** Navigation

Jump between parenthesis

#+BEGIN_SRC emacs_lisp
(global-set-key (kbd "C-x <down>") 'forward-sexp)
(global-set-key (kbd "C-x <up>") 'backward-sexp)
#+END_SRC
